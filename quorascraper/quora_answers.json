[{"Answerrer":"Guru Stron","Answer":"I am not sure why it changes when you change it from 10 to 1\n\nI believe it is an implementation detail and you should not rely on it (will try find something in the specs) but some positive single digit numbers are cached in int.ToString implementation for .NET Core. Here is excerpt from UInt32ToDecStr which is called internally by int.ToString:\n\n// For single-digit values that are very common, especially 0 and 1, just return cached strings.\nif (bufferLength == 1)\n{\n    return s_singleDigitStringCache[value];\n}\n\n\nAs for equality - please check:\n\nC# difference between == and Equals().\nString interning in .Net Framework. (compiler will intern string literals, so all of them will point to the same address in memory)\nUsing type dynamic\n\nUPD:\n\nWas not able to find anything in specs, but next code behaves differently in .NET Framework and .NET 6 (former one prints 11 times False and the latter prints 10 times True and one False):\n\nvar dict = new Dictionary<int, string>()\n{\n    {0, \"0\"},\n    {1, \"1\"},\n    {2, \"2\"},\n    {3, \"3\"},\n    {4, \"4\"},\n    {5, \"5\"},\n    {6, \"6\"},\n    {7, \"7\"},\n    {8, \"8\"},\n    {9, \"9\"},\n    {10, \"10\"},\n};\n\nforeach(var kvp in dict)\n{\n    Console.WriteLine(object.ReferenceEquals(kvp.Key.ToString(), kvp.Value));\n}"}]